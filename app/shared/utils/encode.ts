async function getCryptoKey(): Promise<CryptoKey> {
  const keyBase64 = process.env.VITE_PUBLIC_ENCRYPTION_KEY?.trim();

  if (!keyBase64) {
    throw new Error('üî¥ VITE_PUBLIC_ENCRYPTION_KEY –Ω–µ –∑–∞–¥–∞–Ω!');
  }

  let rawKey;
  try {
    rawKey = Uint8Array.from(atob(keyBase64), (c) => c.charCodeAt(0));
  } catch (e) {
    throw new Error('üî¥ –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞! –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π base64.');
  }

  if (rawKey.length !== 32) {
    throw new Error(`üî¥ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–ª—é—á–∞: ${rawKey.length} –±–∞–π—Ç (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 32).`);
  }

  return crypto.subtle.importKey('raw', rawKey, { name: 'AES-GCM' }, false, ['encrypt', 'decrypt']);
}

export async function decode(encryptedText: string): Promise<string> {
  if (!encryptedText || encryptedText.length < 16) {
    // üõë –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø–µ—Ä–µ–¥ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    throw new Error('üî¥ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!');
  }

  const key = await getCryptoKey();
  let bytes;

  try {
    bytes = Uint8Array.from(atob(encryptedText), (c) => c.charCodeAt(0));
  } catch (e) {
    throw new Error('üî¥ –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è Base64! –î–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã.');
  }

  if (bytes.length < 13) {
    // 12 –±–∞–π—Ç IV + –º–∏–Ω–∏–º—É–º 1 –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö
    throw new Error('üî¥ –î–ª–∏–Ω–∞ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞!');
  }

  const iv = bytes.slice(0, 12); // ‚úÖ –ü–µ—Ä–≤—ã–µ 12 –±–∞–π—Ç ‚Äî —ç—Ç–æ IV
  const encryptedData = bytes.slice(12);

  // üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º
  let decrypted;
  try {
    decrypted = await window.crypto.subtle.decrypt({ name: 'AES-GCM', iv }, key, encryptedData);
  } catch (e) {
    throw new Error('üî¥ –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏! –í–æ–∑–º–æ–∂–Ω–æ, –¥–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã.');
  }

  return new TextDecoder().decode(decrypted);
}

export async function encode(text: string): Promise<string> {
  const key = await getCryptoKey();
  const iv = crypto.getRandomValues(new Uint8Array(12)); // 12-–±–∞–π—Ç–æ–≤—ã–π IV
  const encodedText = new TextEncoder().encode(text);

  // üîí –®–∏—Ñ—Ä—É–µ–º
  const encrypted = await window.crypto.subtle.encrypt({ name: 'AES-GCM', iv }, key, encodedText);

  // üîÑ –û–±—ä–µ–¥–∏–Ω—è–µ–º IV + –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const combined = new Uint8Array(iv.length + encrypted.byteLength);
  combined.set(iv, 0);
  combined.set(new Uint8Array(encrypted), iv.length);

  return btoa(String.fromCharCode(...combined)); // ‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Base64
}
